server {
    ## Your website name goes here.
    server_name _;

    ## Your only path reference.
    root /var/www/html;

    listen 80 default;
    listen 443 ssl http2;

    #ssl on

    # Protect against the BEAST and POODLE attacks by not using SSLv3 at all. If you need to support older browsers (IE6) you may need to add
    # SSLv3 to the list of protocols below.
    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;

    # Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla (Intermediate Set) - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
    ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
    ssl_prefer_server_ciphers  on;

    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  24h;

    # SSL buffer size was added in 1.5.9
    ssl_buffer_size      1400; # 1400 bytes to fit in one MTU

    # Use a higher keepalive timeout to reduce the need for repeated handshakes
    keepalive_timeout 300; # up from 75 secs default

    # HSTS (HTTP Strict Transport Security)
    # This header tells browsers to cache the certificate for a year and to connect exclusively via HTTPS.
    add_header Strict-Transport-Security "max-age=31536000;";
    # This version tells browsers to treat all subdomains the same as this site and to load exclusively over HTTPS
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # This default SSL certificate will be served whenever the client lacks support for SNI (Server Name Indication).
    # Make it a symlink to the most important certificate you have, so that users of IE 8 and below on WinXP can see your main site without SSL errors.
    ssl_certificate      /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key  /etc/nginx/ssl/nginx.key;
    ssl_dhparam          /etc/nginx/ssl/dhparam.pem;

    ## This should be in your http block and if it is, it's not needed here.
    index index.html index.htm index.php;

    ## Charset
    charset utf-8;

    include conf.d/drop;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location @rewrite {
       rewrite ^/(.*)$ /index.php?q=$1;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in the middle,
    # such as update.php/selection. The rule we use is strict, and only allows this pattern
    # with the update.php front controller.  This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If you do not have
    # any paths like that, then you might prefer to use a laxer rule, such as:
    #   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL pattern with front
    # controllers other than update.php in a future release.
    location ~ '\.php$|^/update.php' {
        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        fastcgi_buffers 8 256k;
        fastcgi_buffer_size 128k;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_intercept_errors on;
        fastcgi_pass fpm:9000;
    }

    # Fighting with Styles? This little gem is amazing.
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    # Handle private files through Drupal.
    location ~ ^/system/files/ { # For Drupal >= 7
        try_files $uri $uri/ /index.php?$args;
    }

    ## Set expires max on static file types
    location ~* ^.+\.(css|js|js2|js3|js4|jpg|jpeg|gif|png|ico|htc|less|ico|gz|svg|svgz|ttf|otf|woff|eot|mp4|ogg|ogv|webm)$ {
        expires max;
        log_not_found off;
        access_log off;
    }

    ## Set expires max on app file types
    ## TODO: Organize extension types
    location ~ \.(asf|asx|wax|wmv|wmx|avi|bmp|class|divx|doc|docx|eot|exe|gzip|jpe|json|mdb|mid|midi|mov|qt|mp3|m4a|mp4|m4v|mpeg|mpg|mpe|mpp|otf|odb|odc|odf|odg|odp|ods|odt|ogg|pdf|pot|pps|ppt|pptx|ra|ram|swf|tar|tif|tiff|ttf|ttc|wav|wma|wri|xla|xls|xlsx|xlt|xlw|zip)$ {
        expires max;
        log_not_found off;
        access_log off;
    }

    # Cross domain webfont access
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
        # Cross domain AJAX requests

        # http://www.w3.org/TR/cors/#access-control-allow-origin-response-header

        # **Security Warning**
        # Do not use this without understanding the consequences.
        # This will permit access from any other website.
        #
        add_header "Access-Control-Allow-Origin" "*";

        # Instead of using this file, consider using a specific rule such as:
        #
        # Allow access based on [sub]domain:
        #    add_header "Access-Control-Allow-Origin" "subdomain.example.com";

        # Also, set cache rules for webfonts.
        #
        # See http://wiki.nginx.org/HttpCoreModule#location
        # And https://github.com/h5bp/server-configs/issues/85
        # And https://github.com/h5bp/server-configs/issues/86
        expires 1M;
        access_log off;
        add_header Cache-Control "public";
    }

    # Cross domain AJAX requests

    # http://www.w3.org/TR/cors/#access-control-allow-origin-response-header

    # **Security Warning**
    # Do not use this without understanding the consequences.
    # This will permit access from any other website.
    #
    add_header "Access-Control-Allow-Origin" "*";

    # Instead of using this file, consider using a specific rule such as:
    #
    # Allow access based on [sub]domain:
    #    add_header "Access-Control-Allow-Origin" "subdomain.example.com";

    # The X-Frame-Options header indicates whether a browser should be allowed
    # to render a page within a frame or iframe.
    add_header X-Frame-Options SAMEORIGIN;

    # MIME type sniffing security protection
    #	There are very few edge cases where you wouldn't want this enabled.
    add_header X-Content-Type-Options nosniff;

    # The X-XSS-Protection header is used by Internet Explorer version 8+
    # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
    add_header X-XSS-Protection "1; mode=block";

    ## opt-in to the future
    add_header "X-UA-Compatible" "IE=Edge,chrome=1";
}
